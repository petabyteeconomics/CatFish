% CatFish: a Bayesian Categorical Variable Multiplicative Poisson Economic Demand Model
% (c) Ed Egan, Petabyte Economics Corp., Jan. 2024. All Rights Reserved.

classdef Partition < matlab.mixin.Copyable
    % A Partition divides one or more dimension(s) into categories.
    % Their l2c tables can be loaded from data or generated by a function. 
    % Their c2e tables are computed from their l2c tables and their dimension(s)'s l2e tables.
    % Partitions are stored in the model.partitions array and indexed by p.
    
    properties
        dimensions = Dimension.empty % Array of dimension objects
        p % Index in model array
        name % Partition name (so humans can refer to partitions)
        l2c = table; % labels l_{d} to category c table (loaded)
        c2e = table; % category to e_index table (computed)
    end

    methods(Sealed) % These are array methods.
        function c_cols = c_cols(objs)
            % Get c_d column names (i.e., c_1, or c_2x5) for an array of partitions
            c_cols = strings(1, length(objs));
            for i = 1:length(objs)
                % Make the c_col field for this col name
                c_cols(i) = "c_" + join(string([objs(i).dimensions.d]), "x"); 
            end
        end

        function min_d =  min_d(objs)
            % Get minimum dimension number for this/these partition(s). Used for sorting.
            min_d = NaN(1, length(objs));
            for i = 1:length(objs)
                min_d(i) = min([objs(i).dimensions.d]); 
            end
        end

        function c2e = make_c2e(objs)
            % Make c2e table(s) for an array of partitions.
            % Partitions must have l2c tables and dimensions (with l2e tables).
            for i = 1:length(objs)
                partition = objs(i);
                c2e = table;
                include_row = true(height(partition.l2c), 1);
                for j = 1:length(partition.dimensions)
                    dimension = partition.dimensions(j);
                    partition_l = partition.l2c.("l_" + dimension.d); % To be translated...
                    partition_c = partition.l2c.(partition.c_cols);
                    [exists, dimension_idx] = ismember(partition_l, dimension.l2e.l); % dimension.l2e.l may not contain partition labels.
                    c2e.(partition.c_cols)(exists) = partition_c(exists);
                    c2e.("e_" + dimension.d)(exists) = dimension.l2e.e(dimension_idx(exists == 1));
                    include_row = include_row & exists;
                end
                c2e = c2e(include_row, :); % Exclude rows with unmatched labels    
                partition.c2e = c2e; % Record it in the partition object
            end
        end

        function c2e = get_c2e(objs)
            % Return a *cell array* of c2e table(s) for an array of partitions.
            % Used when constructing multiple block.
            c2e = cell(1, length(objs));
            for i = 1:length(objs)
                c2e{i} = objs(i).c2e;
            end
        end        
    end

    methods
        function obj = Partition(dimensions, p, name, l2c)
            % The Partition constructor. Name and l2c are optional. p is a (global) partition number.
            if  nargin > 0 
                if nargin == 4
                    obj.l2c = l2c;
                end
                if nargin >= 3
                    obj.name = name;
                end
                obj.dimensions = dimensions;
                obj.p = p;
            end
        end

        function c = c(obj)
            % Get unique, ordered c_d column names from a partition's l2c table
            c = unique(obj.l2c.(obj.c_cols));
        end
    end
end
